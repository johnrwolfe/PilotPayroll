-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("5de111b2-daf6-4e32-b67a-9243abc48fc4",
	'Observation',
	3,
	'Observation',
	'The supertype for those classes which, when invoked, will measure some change in the application under test.

In general an observation will report on, or evaluate against some criteria, some returned value from the application.
An observation may fail if it does not satisfy the presented criteria within a time limit, if specified.

A observation may be polling or triggered:

If polling, and an interval is specified, the evaluation will be repeated periodically; again, the time limit applies.

If triggered, an evaluation may be caused at any time by the testbench, when deemed appropriate.
To do this, the testbench should signal an "assess" with a key value matching that of the observation.

If an observation fails to succeed, the test case is deemed to have failed; all un-executed stimuli and observations are cancelled.
',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("362ae8d8-0227-427f-9ce9-4daa4fb20ec2",
	"5de111b2-daf6-4e32-b67a-9243abc48fc4",
	'AppendPolling',
	'Add an instance of Observation sub/supertype pair following the specified stimulus.
A polling observation may be re-evaluated at specified intervals.
An overall time limit for such re-evaluation may also be specified.
Failure to signal success within the time limit is considered a time-out failure.
Any observation failure terminates the entire test case.
Note: 
 if both poll interval and time limit are zero, the observation will be invoked once only;
 this invocation may occur before all events at this time instance have been processed;
 the ordering of simultaneous event processing may affect success or failure.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'send TESTSEQ::AddObservation( stimulusId:param.stimulus, 
                              observationId:self.observationId,
                              pollInterval:param.pollInterval, 
                              pollDuration:param.timeLimit, 
                              eventKey:"");',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0);
INSERT INTO O_TPARM
	VALUES ("2a9c69ea-d7ae-41f5-ac00-d7137263ca45",
	"362ae8d8-0227-427f-9ce9-4daa4fb20ec2",
	'stimulus',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("6d3e2682-2186-4312-9b9f-350d4fab97d9",
	"362ae8d8-0227-427f-9ce9-4daa4fb20ec2",
	'timeLimit',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"e9e77901-e555-4429-be27-f8c60878cfa3",
	'');
INSERT INTO O_TPARM
	VALUES ("e9e77901-e555-4429-be27-f8c60878cfa3",
	"362ae8d8-0227-427f-9ce9-4daa4fb20ec2",
	'pollInterval',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"2a9c69ea-d7ae-41f5-ac00-d7137263ca45",
	'');
INSERT INTO O_TFR
	VALUES ("a0eb3ec0-8fe3-4db3-a73d-34bda6bf2beb",
	"5de111b2-daf6-4e32-b67a-9243abc48fc4",
	'Observe',
	'This operation will be invoked when the counterpart instance is encountered by the sequencing service.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select one gn related by self->GetNotification[R2];
if ( not_empty gn )
  gn.CheckNotification();
else
  select one rvw related by self->ReviewPayrollEntry[R2];
  if ( not_empty rvw )
  	rvw.ReviewEntry();
  else
  	select one wft related by self->WaitForTrigger[R2];
  	if ( not_empty wft )
  	  wft.EndWait();
  	end if;
  end if;
end if;',
	1,
	'',
	"b1a1d8af-df67-4ade-bedb-59d5c52f3606",
	0);
INSERT INTO O_TFR
	VALUES ("5a25ad24-e7e9-4fe2-bec9-1628aefaf20b",
	"5de111b2-daf6-4e32-b67a-9243abc48fc4",
	'Complete',
	'Respond to the sequencing service with success or failure of the observation subtype.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'send TESTSEQ::ObservationDone( observationId:self.observationId, success:param.success );',
	1,
	'',
	"a0eb3ec0-8fe3-4db3-a73d-34bda6bf2beb",
	0);
INSERT INTO O_TPARM
	VALUES ("af684f19-1c26-4912-8f0a-5330ed5c96bf",
	"5a25ad24-e7e9-4fe2-bec9-1628aefaf20b",
	'success',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("b1a1d8af-df67-4ade-bedb-59d5c52f3606",
	"5de111b2-daf6-4e32-b67a-9243abc48fc4",
	'AppendTriggered',
	'Add an instance of Observation sub/supertype pair following the specified stimulus.
A triggered observation will be re-evaluated whenever its key value matches that of a assess signal.
An overall time limit for such re-evaluation may be specified.
Failure to signal success within the time limit is considered a time-out failure.
Any observation failure terminates the entire test case.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'send TESTSEQ::AddObservation( stimulusId:param.stimulus, observationId:self.observationId,
                                                   pollInterval:param.pollInterval, 
                                                   pollDuration:param.timeLimit, 
                                                   eventKey:param.key );',
	1,
	'',
	"362ae8d8-0227-427f-9ce9-4daa4fb20ec2",
	0);
INSERT INTO O_TPARM
	VALUES ("14d52d47-0a9c-4b16-b128-8f5bbb1e370f",
	"b1a1d8af-df67-4ade-bedb-59d5c52f3606",
	'stimulus',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("92784fa3-ca53-4efa-bec7-468292ee75d0",
	"b1a1d8af-df67-4ade-bedb-59d5c52f3606",
	'timeLimit',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"535952e6-e118-4750-8c1e-66260cb7332f",
	'');
INSERT INTO O_TPARM
	VALUES ("2f5fa361-017d-43f2-bcff-9100e3c11fb1",
	"b1a1d8af-df67-4ade-bedb-59d5c52f3606",
	'key',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"14d52d47-0a9c-4b16-b128-8f5bbb1e370f",
	'');
INSERT INTO O_TPARM
	VALUES ("535952e6-e118-4750-8c1e-66260cb7332f",
	"b1a1d8af-df67-4ade-bedb-59d5c52f3606",
	'pollInterval',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"2f5fa361-017d-43f2-bcff-9100e3c11fb1",
	'');
INSERT INTO O_TFR
	VALUES ("adae075f-8921-4e92-985f-d87cada085c5",
	"5de111b2-daf6-4e32-b67a-9243abc48fc4",
	'ReadIntervalTimer',
	'Request the value of the interval timer associated with the stimulus sequence this observation  belongs to.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'send TESTSEQ::RequestIntervalTimerValue( observationId:self.observationId, reset:param.reset );',
	1,
	'',
	"5a25ad24-e7e9-4fe2-bec9-1628aefaf20b",
	0);
INSERT INTO O_TPARM
	VALUES ("56863f8d-6ba1-477d-a988-28fcd54ea81f",
	"adae075f-8921-4e92-985f-d87cada085c5",
	'reset',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("f5c3ac45-7ddc-4026-8398-245dc15e0048",
	"5de111b2-daf6-4e32-b67a-9243abc48fc4",
	'Delete',
	'Dispose of the client instances when the test sequence service no longer needs them.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select one gn related by self->GetNotification[R2];
if ( not_empty gn )
  unrelate gn from self across R2;
  delete object instance gn;
else
  select one rvw related by self->ReviewPayrollEntry[R2];
  if ( not_empty rvw )
  	unrelate rvw from self across R2;
  	delete object instance rvw;
  else
  	select one wft related by self->WaitForTrigger[R2];
  	if ( not_empty wft )
  	  unrelate wft from self across R2;
  	  delete object instance wft;
  	end if;
  end if;
end if;
delete object instance self;',
	1,
	'',
	"adae075f-8921-4e92-985f-d87cada085c5",
	0);
INSERT INTO O_NBATTR
	VALUES ("5ce85858-505b-4113-aa85-c6974e41db04",
	"5de111b2-daf6-4e32-b67a-9243abc48fc4");
INSERT INTO O_BATTR
	VALUES ("5ce85858-505b-4113-aa85-c6974e41db04",
	"5de111b2-daf6-4e32-b67a-9243abc48fc4");
INSERT INTO O_ATTR
	VALUES ("5ce85858-505b-4113-aa85-c6974e41db04",
	"5de111b2-daf6-4e32-b67a-9243abc48fc4",
	"00000000-0000-0000-0000-000000000000",
	'observationId',
	'An identifier returned by the Test sequencer service.
Used to identify an instance when being invoked by the Test sequencer.',
	'',
	'observationId',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"5de111b2-daf6-4e32-b67a-9243abc48fc4");
INSERT INTO O_ID
	VALUES (1,
	"5de111b2-daf6-4e32-b67a-9243abc48fc4");
INSERT INTO O_ID
	VALUES (2,
	"5de111b2-daf6-4e32-b67a-9243abc48fc4");
INSERT INTO PE_PE
	VALUES ("5de111b2-daf6-4e32-b67a-9243abc48fc4",
	1,
	"2af95cb4-1348-4abf-a7fa-72c9872d63cb",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("2af95cb4-1348-4abf-a7fa-72c9872d63cb",
	"00000000-0000-0000-0000-000000000000",
	"254e12da-372d-4f11-ad9a-5b53303407a5",
	'Testbench',
	'An application-specific testbench which will run a series of test cases and report success or failure.
Controlled by an application-independent utility the testbench injects stimuli and observes results.

Test cases are grouped into one or more test buckets which are added to a singleton test suite.
Testing is initiated by a function which registers a test suite with the utility and adds test buckets.
Each test bucket surfaces an operation which ''scripts'' its test cases.
A test cases creates one or more sequences of stimuli which are added by the script.
Each stimulus can be followed by zero or more observations which assess application output.

A summary report presents test case pass/fail information.',
	0,
	'../Testbench.xtuml');
